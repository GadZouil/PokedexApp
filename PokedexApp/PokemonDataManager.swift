//
//  PokemonDataManager.swift
//  PokedexApp
//
//  Created by Ethan LEGROS on 2/17/25.
//

import Foundation
import CoreData

/// Gestionnaire de persistance pour les Pok√©mon avec Core Data.
class PokemonDataManager {
    // Singleton global
    static let shared = PokemonDataManager()

    // Persistent container pour Core Data
    let persistentContainer: NSPersistentContainer

    // Contexte principal
    var context: NSManagedObjectContext {
        return persistentContainer.viewContext
    }

    // Initialisation et chargement du store
    private init() {
        persistentContainer = NSPersistentContainer(name: "PokedexApp")
        persistentContainer.loadPersistentStores { _, error in
            if let error = error {
                fatalError("[‚ùå ERREUR] √âchec du chargement de Core Data : \(error.localizedDescription)")
            } else {
                #if DEBUG
                print("[‚úÖ SUCCESS] Core Data charg√© avec succ√®s.")
                #endif
            }
        }
    }

    // üíæ Sauvegarder un Pok√©mon dans Core Data
    func savePokemon(_ pokemon: PokemonModel) {
        let request: NSFetchRequest<PokemonEntity> = PokemonEntity.fetchRequest()
        request.predicate = NSPredicate(format: "id == %d", pokemon.id)

        // V√©rifier si le Pok√©mon existe d√©j√†
        do {
            let results = try context.fetch(request)
            if results.isEmpty {
                let newPokemon = PokemonEntity(context: context)
                newPokemon.id = Int64(pokemon.id)
                newPokemon.name = pokemon.name
                newPokemon.imageURL = pokemon.sprites.frontDefault
                newPokemon.primaryType = pokemon.primaryType
                newPokemon.hp = Int64(pokemon.hp)
                newPokemon.attack = Int64(pokemon.attack)
                newPokemon.defense = Int64(pokemon.defense)
                newPokemon.speed = Int64(pokemon.speed)

                saveContext()
                #if DEBUG
                print("[‚≠ê AJOUT√â] Pok√©mon \(pokemon.name) enregistr√© dans Core Data.")
                #endif
            } else {
                #if DEBUG
                print("[‚ÑπÔ∏è INFO] Pok√©mon \(pokemon.name) d√©j√† existant.")
                #endif
            }
        } catch {
            print("[‚ö†Ô∏è ERREUR] √âchec de la v√©rification/sauvegarde de \(pokemon.name) : \(error)")
        }
    }

    // üì¶ R√©cup√©rer tous les Pok√©mon
    func fetchAllPokemons() -> [PokemonEntity] {
        let request: NSFetchRequest<PokemonEntity> = PokemonEntity.fetchRequest()
        do {
            return try context.fetch(request)
        } catch {
            print("[‚ö†Ô∏è ERREUR] √âchec de r√©cup√©ration des Pok√©mon : \(error.localizedDescription)")
            return []
        }
    }

    // üöÆ Supprimer un Pok√©mon
    func deletePokemon(_ pokemon: PokemonEntity) {
        context.delete(pokemon)
        saveContext()
    }

    // üíæ Enregistrer les modifications
    func saveContext() {
        if context.hasChanges {
            do {
                try context.save()
                #if DEBUG
                print("[‚úÖ SUCCESS] Modifications Core Data enregistr√©es.")
                #endif
            } catch {
                print("[‚ö†Ô∏è ERREUR] √âchec de la sauvegarde de Core Data : \(error.localizedDescription)")
            }
        }
    }
}
